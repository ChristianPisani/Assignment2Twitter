extends layout

block content
  h1=title
  p="Write words separated by spaces to generate columns for each word"
  
  textarea(id='inputdata', cols=40, rows=10)
  
  div.barchart
    span.label Chart
  
  script.
    //Stub data
    var data = [];
    var data_words = [];
    var oldWords = [];
    var oldWordLength = 0;
    
    onload = function() {
      LayoutChart();
      
      window.setInterval(function() {        
        UpdateChart();
        //UpdateData();
        const d = AnalyseData();
        data = d.counts;
        data_words = d.words;
        console.log(data);
      }, 1000);
    }
    
    function fetchData() {
      
    }
    
    function AnalyseData() {
      const input = $("textarea#inputdata").val().replace(/\s+/g," ").split(" ");
      let words = [];
      let counts = [];
      
      for(i = 0; i < input.length; i++) {
        if(!words.includes(input[i])) {
          words.push(input[i]);
          counts.push(1);
        } else {
          counts[words.indexOf(input[i])]++;
        }
      }
      console.log(input);
      return {words: words, counts: counts};
    }
    
    //Randomly change columns
    function UpdateData() {
      data[Math.floor(Math.random() * data.length)] += 
          Math.floor(Math.random() * 100);
    }
    
    const height = 200;
    const width = 720;
    const barOffset = 20;
    const barWidth = 30;
    
    function AddColumns(count) {
      let columns = d3.selectAll('.barchart').selectAll('svg');
      for(i = 0; i < count; i++) {
        columns.append('rect');
      }
    }
    
    function RemoveColumns(count) {
      let columns = d3.selectAll('.barchart').selectAll('svg').select('rect');
      for(i = 0; i < count; i++) {
        columns.remove()
      }
    }
  
    function UpdateChart() {
      let yScale = d3.scaleLinear()
        .domain([0, d3.max(data)])
        .range([0, height])
        
      let colorScale = d3.scaleLinear()
        .domain([0, d3.max(data)])
        .range([0, 100])
        
      columnCount = d3.select('.barchart').select('svg')
        .selectAll('rect').size();
      console.log(columnCount + ":" + data.length-1);
      if(columnCount < data.length) {
        AddColumns(data.length - columnCount);
      } 
      if(columnCount > data.length) {
        RemoveColumns(columnCount - data.length);
      }
      
      d3.select('.barchart').selectAll('svg')
        .selectAll('rect').data(data).transition()
          .attr('width', barWidth)
          .attr('height', function(d) { return yScale(d) })
          .attr('x', function(d, i) {
            return i * (barWidth + barOffset);
          })
          .attr('y', function(d) {
            return height - yScale(d);  
          })
          .text(function(d) { return d })
          .attr("fill", function(d) { return `hsl(${colorScale(d)}, 100%, 50%)` });
    }
    
    function LayoutChart() {
      let yScale = d3.scaleLinear()
        .domain([0, d3.max(data)])
        .range([0, height])
      
      d3.select('.barchart').append('svg')
        .attr('width', width)
        .attr('height', height)
        .style('border', '1px solid black')
        .style('background', '#dff0d8')
        .selectAll('rect').data(data)
        .enter().append('rect')
          .attr('width', barWidth)
          .attr('height', function(d) { return yScale(d) })
          .attr('x', function(d, i) {
            return i * (barWidth + barOffset);
          })
          .attr('y', function(d) {
            return height - yScale(d);  
          })
          .text(function(d) { return d })
          .attr("fill", function(d) { return `hsl(${d}%, 100%, 50%)` });
    }
    
